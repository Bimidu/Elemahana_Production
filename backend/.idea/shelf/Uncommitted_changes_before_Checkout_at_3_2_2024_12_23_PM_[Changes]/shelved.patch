Index: index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express, {request, response} from \"express\";\r\nimport {PORT, mongoDBURL} from \"./config.js\";\r\nimport mongoose from \"mongoose\";\r\nimport {TestRecord} from \"./models/TestModel.js\";\r\nimport cors from 'cors';\r\nimport testRoute from \"./routes/TestRoute.js\";\r\nimport TransactionsRoute from \"./routes/TransactionsRoute.js\";\r\nimport DiseaseRoute from \"./routes/DiseaseRoute.js\";\r\n\r\n\r\nconst app = express();\r\n\r\napp.use(express.json());\r\n\r\napp.use(cors());\r\n\r\n/*\r\napp.use(\r\n  cors({\r\n     origin: 'http://localhost:3000',\r\n     methods: ['GET', 'POST', 'PUT', 'DELETE'],\r\n     allowedHeaders: ['Content-Type'],\r\n   })\r\n );\r\n*/\r\n\r\n\r\napp.use('/financeincome', testRoute);\r\napp.use('/transactions', TransactionsRoute);\r\n\r\n//route for add new disease record\r\napp.use('/addDisease', DiseaseRoute);\r\n\r\nmongoose\r\n    .connect(mongoDBURL)\r\n    .then(() => {\r\n        console.log('App connected to the database');\r\n        app.listen(PORT, () => {\r\n            console.log(`App is listening to port : ${PORT}`);\r\n        });\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    });
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.js b/index.js
--- a/index.js	
+++ b/index.js	
@@ -28,8 +28,8 @@
 app.use('/financeincome', testRoute);
 app.use('/transactions', TransactionsRoute);
 
-//route for add new disease record
-app.use('/addDisease', DiseaseRoute);
+//route for disease records
+app.use('/diseases', DiseaseRoute);
 
 mongoose
     .connect(mongoDBURL)
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/.idea/.gitignore	
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: .idea/vcs.xml
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/modules.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/backend.iml" filepath="$PROJECT_DIR$/.idea/backend.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: routes/DiseaseRoute.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {DiseasesRecord} from \"../models/DiseasesModel.js\";\r\nimport express, {request, response} from \"express\";\r\n\r\nconst router = express.Router();\r\n\r\n//create new disease record\r\nrouter.post('/', async (request, response) => {\r\n    try{\r\n        if (\r\n            !request.body.disease_name ||\r\n            !request.body.crop ||\r\n            !request.body.date ||\r\n            !request.body.location ||\r\n            !request.body.severity ||\r\n            !request.body.treatment ||\r\n            !request.body.status\r\n        ) {\r\n            return response.status(400).send({\r\n                message: 'Send all required fields',\r\n            });\r\n        }\r\n        const newDiseaseRecord = {\r\n            disease_name: request.body.disease_name,\r\n            crop: request.body.crop,\r\n            date: request.body.date,\r\n            location: request.body.location,\r\n            severity: request.body.severity,\r\n            treatment: request.body.treatment,\r\n            status: request.body.status,\r\n        };\r\n\r\n        const disease = await DiseasesRecord.create(newDiseaseRecord);\r\n\r\n        return response.status(201).send(disease);\r\n    }catch(error) {\r\n        console.log(error.message);\r\n        response.status(500).send({message: error.message});\r\n    }\r\n} );\r\n\r\nexport default router;\r\n
===================================================================
diff --git a/routes/DiseaseRoute.js b/routes/DiseaseRoute.js
--- a/routes/DiseaseRoute.js	
+++ b/routes/DiseaseRoute.js	
@@ -38,4 +38,89 @@
     }
 } );
 
+//get disease record
+router.get('/',async(request, response)=>{
+    try{
+        const diseases = await DiseasesRecord.find({});
+
+        return response.status(200).json({
+            count: diseases.length,
+            data: diseases
+
+        });
+    }catch(error){
+        console.log(error.message);
+        response.status(500).send({message: error.message});
+    }
+});
+
+//get disease record by id
+router.get('/:id',async(request, response)=>{
+    try{
+
+        const {id} = request.params;
+
+        const disease = await DiseasesRecord.findById(id);
+
+        return response.status(200).json(disease);
+    }catch(error){
+        console.log(error.message);
+        response.status(500).send({message: error.message});
+    }
+});
+
+//update disease record
+
+router.put('/:id', async (request, response) => {
+   try{
+       if(
+           !request.body.disease_name ||
+           !request.body.crop ||
+           !request.body.date ||
+           !request.body.location ||
+           !request.body.severity ||
+           !request.body.treatment ||
+           !request.body.status
+       ){
+           return response.status(400).send({
+               message: 'Send all required fields'
+           });
+       }
+
+       const {id} = request.params;
+
+       const result = await DiseasesRecord.findByIdAndUpdate(id, request.body);
+
+       if(!result){
+           return response.status(404).json({message: 'Disease record not found'});
+       }
+
+       return response.status(200).send({ message: 'Disease record updated successfully'});
+   } catch(error){
+       console.log(error.message);
+       response.status(500).send({message: error.message})
+   }
+});
+
+//delete disease record
+
+router.delete('/:id', async (request, response) => {
+    try{
+        const {id} = request.params;
+
+        const result = await DiseasesRecord.findByIdAndDelete(id);
+
+        if(!result){
+            return response.status(404).json({ message: 'Disease record not found'});
+        }
+
+        return response.status(200).send({ message: 'Disease record deleted successfully'});
+
+    }catch(error){
+        console.log(error.message);
+        response.status(500).send({ message: error.message});
+    }
+})
+
+
 export default router;
